apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cf-review-env.fullname" . }}
  labels:
    {{- include "cf-review-env.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount | default "1" }}
  strategy:
{{- if .Values.strategy }}
{{ toYaml .Values.strategy | indent 4 }}
{{- end }}
  progressDeadlineSeconds: {{ .Values.progressDeadlineSeconds | default "600" }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit | default "10" }}
  selector:
    matchLabels:
      {{- include "cf-review-env.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        # Force all new release to recreate the pods #
        rollme: {{ randAlphaNum 5 | quote }}
      labels:
        {{- include "cf-review-env.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          {{- if .Values.customCommand }}
          {{- if eq .Values.customCommand.enabled true }}
          command: ["{{ .Values.customCommand.command }}"]
          {{- end }}
          {{- end }}
          env:
            # Altough the hosts is a list, we always have only one.
            # We never used this and it will basically be removed in the future.
            # Sp, it's better to only expose one host.
            name: KR_HOST
            value: {{- (index .Values.ingress.hosts 0).host }}
          {{- if eq .Values.envFrom.enabled true }}
          envFrom:
            - secretRef:
                name: {{ .Values.envFrom.secretRef.name }}
          {{- end }}
          ports:
            - name: {{ .Values.deployment.ports.name }}
              containerPort: {{ .Values.deployment.ports.containerPort }}
              protocol: {{ .Values.deployment.ports.protocol | default "TCP" }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path | default "/" }}
              port: {{ .Values.deployment.ports.containerPort }}
              scheme: {{ .Values.livenessProbe.httpGet.scheme | default "HTTP" }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds | default "5" }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default "5" }}
            successThreshold: {{ .Values.livenessProbe.successThreshold | default "1" }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold | default "30" }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path | default "/" }}
              port: {{ .Values.deployment.ports.containerPort }}
              scheme: {{ .Values.readinessProbe.httpGet.scheme | default "HTTP" }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds | default "5" }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds | default "5" }}
            successThreshold: {{ .Values.readinessProbe.successThreshold | default "1" }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold | default "30" }}
          startupProbe:
            httpGet:
              path: {{ .Values.startupProbe.httpGet.path | default "/" }}
              port: {{ .Values.deployment.ports.containerPort }}
              scheme: {{ .Values.startupProbe.httpGet.scheme | default "HTTP" }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds | default "5" }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds | default "5" }}
            successThreshold: {{ .Values.startupProbe.successThreshold | default "1" }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold | default "60" }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- if eq .Values.dockerDind.enabled true }}
          env:
            - name: DOCKER_HOST
              value: tcp://localhost:2375
        - name: dind-daemon
          image: docker:stable-dind
          env:
            - name: DOCKER_TLS_CERTDIR
              value: ""
          resources:
            requests:
              cpu: {{ .Values.dockerDind.cpu | default "100m" }}
              memory: {{ .Values.dockerDind.memory | default "512Mi" }}
          securityContext:
            privileged: true
          volumeMounts:
            - name: docker-store
              mountPath: /var/lib/docker
      volumes:
        - name: docker-store
          emptyDir: {}
      {{- end }}
      serviceAccountName: {{ include "cf-review-env.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: {{ .Values.restartPolicy | default "Always" }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds | default "40" }}
      dnsPolicy: {{ .Values.dnsPolicy | default "ClusterFirst" }}