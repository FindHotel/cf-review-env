apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cf-review-env.fullname" . }}
  labels:
    {{- include "cf-review-env.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  strategy:
{{- if .Values.strategy }}
{{ toYaml .Values.strategy | indent 4 }}
{{- end }}
  progressDeadlineSeconds: {{ .Values.progressDeadlineSeconds }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "cf-review-env.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "cf-review-env.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      serviceAccountName: {{ include "cf-review-env.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.envFrom.secretRef.name }}
          envFrom:
            - secretRef:
                name: {{ .Values.envFrom.secretRef.name }}
          {{- end }}
          ports:
            - name: {{ .Values.deployment.ports.name }}
              containerPort: {{ .Values.deployment.ports.containerPort }}
              protocol: {{ .Values.deployment.ports.protocol }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path}}
              port: {{ .Values.service.port}}
              scheme: {{ .Values.livenessProbe.httpGet.scheme}}
            initialDelaySeconds: {{ .Values.livenessProbe.httpGet.initialDelaySeconds}}
            timeoutSeconds: {{ .Values.livenessProbe.httpGet.timeoutSeconds}}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path}}
              port: {{ .Values.service.port}}
              scheme: {{ .Values.readinessProbe.httpGet.scheme}}
            initialDelaySeconds: {{ .Values.readinessProbe.httpGet.initialDelaySeconds}}
            timeoutSeconds: {{ .Values.readinessProbe.httpGet.timeoutSeconds}}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- if .Values.docker.dind.enabled -}}
          # https://hub.docker.com/_/docker
          # https://www.docker.com/blog/docker-can-now-run-within-docker/
          env:
            - name: DOCKER_HOST
              value: tcp://localhost:2375
        - name: dind-daemon
          image: docker:stable-dind
          env:
            - name: DOCKER_TLS_CERTDIR
              value: ""
          resources:
            requests:
              cpu: {{ .Values.docker.dind.cpu}}
              memory: {{ .Values.docker.dind.memory}}
          securityContext:
            privileged: true
          volumeMounts:
            - name: docker-graph-store
              mountPath: /var/lib/docker
      volumes:
        - name: docker-graph-store
          emptyDir: {}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: {{ .Values.restartPolicy }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      dnsPolicy: {{ .Values.dnsPolicy }}
