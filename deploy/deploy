#!/bin/bash
# exit if any command fails
set -e

if [ "$KR_PRE_HOOK" != "" ]; then
  echo "Running pre hook command: $KR_PRE_HOOK"
  eval "$KR_PRE_HOOK"
fi

# DockerHub variables
dockerhub_secret_copy_enabled=${KR_DOCKERHUB_SECRET_COPY_ENABLED:-false}
dockerhub_secret_name=${KR_DOCKERHUB_SECRET_NAME:-docker-cfg}
dockerhub_namespace_name=${KR_DOCKERHUB_NAMESPACE_NAME:-default}

# App variables
pull_request_number=$KR_PULL_REQUEST_NUMBER
branch_name=$KR_BRANCH_NAME
repo_name=$KR_REPO_NAME
repo_owner=$KR_REPO_OWNER

# Kube Review variables
prefix=${KR_PREFIX:-re}
kube_config_file=${KR_KUBE_CONFIG_FILE:-$HOME/.kube/config}
name="$prefix-${KR_ID_OVERRIDE:-$KR_ID}"
short_name=$(echo "$name" | cut -c1-15)
hash=$(echo "$name" | rhash -p "%c" -)
namespace=$short_name-$hash
is_ephemeral=${KR_IS_EPHEMERAL:-true}
host=$namespace.$KR_DOMAIN
url=https://$host
kube_context=$KR_KUBE_CONTEXT
test_connection=${KR_TEST_CONNECTION:-true}

config_context() {
  # kubectl locks the config for each execution. To workaround
  # and allow multiple concurrent kubectl executions we copy the config
  scoped_kubeconfig_file=$kube_config_file-$namespace
  cp "$kube_config_file" "$scoped_kubeconfig_file"
  export KUBECONFIG=${scoped_kubeconfig_file}

  if [ "$kube_context" != "" ]; then
    kubectl config use-context "$kube_context"
  fi
}

namespace_apply() {
  # Variables need to be export in order to be replaced by envsubst
  updated_at=$(date +%s)
  export UPDATED_AT=$updated_at
  export NAMESPACE=$namespace
  export IS_EPHEMERAL=$is_ephemeral
  export PULL_REQUEST_NUMBER=$pull_request_number
  export BRANCH_NAME=$branch_name
  export REPO_NAME=$repo_name
  export REPO_OWNER=$repo_owner
  cat <<EOF | envsubst | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/name: kube-review
  annotations:
    app.kubernetes.io/instance: $NAMESPACE
    app.kubernetes.io/pull_request_number: "$PULL_REQUEST_NUMBER"
    app.kubernetes.io/branch_name: "$BRANCH_NAME"
    app.kubernetes.io/repository_name: "$REPO_NAME"
    app.kubernetes.io/repository_owner: "$REPO_OWNER"
    app.kubernetes.io/updated_at: "$UPDATED_AT"
    app.kubernetes.io/is_ephemeral: "$IS_EPHEMERAL"
  name: $NAMESPACE
EOF
}

copying_dockerhub_secret() {
  if [ "$dockerhub_secret_copy_enabled" = true ];
  then
    echo "Copying Docker Hub Secret"
    TOKEN=$(kubectl -n $dockerhub_namespace_name get secret $dockerhub_secret_name --output="jsonpath={.data.\.dockerconfigjson}")
    cat <<EOF | envsubst | kubectl apply -f -
    apiVersion: v1
    kind: Secret
    metadata:
      name: $dockerhub_secret_name
      namespace: $namespace
    data:
      .dockerconfigjson: $TOKEN
    type: kubernetes.io/dockerconfigjson
EOF
  fi
}

install_resources () {
  work_dir=$(mktemp -d)

  # Prepare directory structure and copy files
	cp -R deploy/resources/base/* "$work_dir"

  # Apply variable substituion on patches
  for f in "$work_dir"/patches/*.json
  do
    KR_NAMESPACE=$namespace \
    envsubst < "$f" | sponge "$f"
	done

  cd "$work_dir"; rm -rf out/*
  kustomize edit set label "app.kubernetes.io/instance:$namespace"
  kustomize build | kubectl delete -f - -n "$namespace" --wait=true --all=true
  kustomize build | kubectl apply -f - -n "$namespace" --wait=true
}

test_chart() {
  if [ "$test_connection" = true ];
  then
    (set -x; helm test "$namespace" --namespace "$namespace")

    # It is necessary to remove the test pod from the helm test bacause HPA metrics may
    # fail when we have a pod with completed status.
    # Issue: https://github.com/kubernetes/kubernetes/issues/79365
    # Issues: https://github.com/kubernetes/kubernetes/issues?page=1&q=is%3Aissue+is%3Aopen+HPA
    echo "Removed the completed Test Pod.";
    kubectl delete pod --selector="app.kubernetes.io/managed-by=Helm" --namespace "$namespace"
  else
    echo "Connection test is disabled.";
  fi
}

export_variables() {
  # Export normally here so they are available to the post hook
  export URL=$url
}

print_postinstall_message() {
  if [ "$KR_MESSAGE" != "" ]; then
    printf "%s\n" "$KR_MESSAGE" "$KR_LOG_URL$namespace"
  fi
}

config_context
namespace_apply
copying_dockerhub_secret
install_resources
export_variables
print_postinstall_message

if [ "$KR_POST_HOOK" != "" ]; then
  echo "Running post hook command: $KR_POST_HOOK"
  eval "$KR_POST_HOOK"
fi
