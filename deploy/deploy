#!/bin/sh
# exit if any command fails
set -e

if [ "$PRE_HOOK" != "" ]; then
  echo "Running pre hook command: $PRE_HOOK"
  eval "$PRE_HOOK"
fi

chart_version=${CHART_VERSION:-0.2.13}
helm_version=3.1.1
chart_ref=cf-review-env

# This code is necessary to ensure backwards compatibility
# The old name parameter included the prefix. In the new
# way the prefix is informed in a different variable.
# This code can be removed once all pipelines start using prefix.
name=${NAME}
if [ "$APP_PREFIX" != "" ]; then
  name="$APP_PREFIX-${APP_NAME_OVERRIDE:-$APP_NAME}"
fi
short_name=$(echo -n $name | cut -c1-15)
hash=$(echo "$name" | rhash -p "%c" -)
namespace=re-$short_name-$hash
is_ephemeral=${APP_IS_EPHEMERAL:-true}
host=$namespace.$APP_DOMAIN
url=https://$host
kube_context=$KUBE_CONTEXT
kube_config_dir=$KUBE_CONFIG_DIR
secrets_file=$SECRETS_FILE
pull_request_number=$PULL_REQUEST_NUMBER
branch_name=$BRANCH_NAME
repo_name=$REPO_NAME
repo_owner=$REPO_OWNER

config_context() {
  # kubectl locks the config for each execution. To workaround
  # and allow multiple concurrent kubectl executions we copy the config
  scoped_kubeconfig_dir=$kube_config_dir-$namespace/
  cp -R "$kube_config_dir" "${scoped_kubeconfig_dir}"
  export KUBECONFIG=${scoped_kubeconfig_dir}/config
  kubectl config use-context "$kube_context"
}

namespace_apply() {
  # Variables need to be export in order to be replaced by envsubst
  updated_at=$(date --utc +%s)
  export UPDATED_AT=$updated_at
  export NAMESPACE=$namespace
  export IS_EPHEMERAL=$is_ephemeral
  export PULL_REQUEST_NUMBER=$pull_request_number
  export BRANCH_NAME=$branch_name
  export REPO_NAME=$repo_name
  export REPO_OWNER=$repo_owner
  cat <<EOF | envsubst | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/name: cf-review-env
  annotations:
    app.kubernetes.io/instance: $NAMESPACE
    app.kubernetes.io/pull_request_number: "$PULL_REQUEST_NUMBER"
    app.kubernetes.io/branch_name: "$BRANCH_NAME"
    app.kubernetes.io/repository_name: "$REPO_NAME"
    app.kubernetes.io/repository_owner: "$REPO_OWNER"
    app.kubernetes.io/updated_at: "$UPDATED_AT"
    app.kubernetes.io/is_ephemeral: "$IS_EPHEMERAL"
  name: $NAMESPACE
EOF
}

apply_secret() {
  # If the user doesn't have secrets we need to generate an empty file
  # to make our chart happy, without this the deployment breaks
  if [ "$secrets_file" != "" ]; then
    secrets_file="secrets.env"
    touch $secrets_file
  fi

  kubectl create secret generic "$namespace" --from-env-file=$secrets_file \
    --dry-run=client -o yaml --save-config=true --namespace "$namespace" | kubectl apply -f -
}

install_chart() {
  if [ "$VALUES_FILE" != "" ]; then
    echo "Using values file from user: $VALUES_FILE"
    export CUSTOMFILE_0="$VALUES_FILE"
  fi

  # We need to use env here because of the CUSTOM vars
  # they have special charectes that export can't handle
  env \
  ACTION=install \
  CHART_REPO_URL="$HELM_REPO_URL" \
  CHART_REF=$chart_ref \
  KUBE_CONTEXT="$kube_context" \
  RELEASE_NAME="$namespace" \
  CHART_VERSION="$chart_version" \
  HELM_VERSION=$helm_version \
  CUSTOM_image_tag="$APP_IMAGE_TAG" \
  CUSTOM_image_repository="$APP_IMAGE_URL" \
  CUSTOM_envFrom_secretRef_name="$namespace" \
  CUSTOM_"ingress_hosts[0]_host=$host" \
  CUSTOM_"ingress_hosts[0]_paths[0]=/" \
  CUSTOM_"ingress_tls[0]_hosts[0]=$host" \
  SKIP_CF_STABLE_HELM_REPO=true \
  WAIT=true \
  CMD_PS='--force --cleanup-on-fail' \
  /opt/bin/release_chart
}

test_chart() {
  TEST_CONNECTION=${TEST_CONNECTION:-true}
  if [ "$TEST_CONNECTION" = true ];
  then
    env ACTION=auth \
    SKIP_CF_STABLE_HELM_REPO=true \
    HELM_VERSION=$helm_version \
    CHART_VERSION="$chart_version" \
    KUBE_CONTEXT="$kube_context" \
    /opt/bin/release_chart
    helm test "$namespace" --namespace "$namespace"

    # It is necessary to remove the test pod from the helm test bacause HPA metrics may
    # fail when we have a pod with completed status.
    # Issue: https://github.com/kubernetes/kubernetes/issues/79365
    # Issues: https://github.com/kubernetes/kubernetes/issues?page=1&q=is%3Aissue+is%3Aopen+HPA
    echo "INFO: Removed the completed Test Pod.";
    kubectl delete pod --selector="app.kubernetes.io/managed-by=Helm" --namespace "$namespace"
  else
    echo "Connection test is disabled.";
  fi
}

export_variables() {
  # Export normally here so they are available to the post hook
  export URL=$url
}

config_context
namespace_apply
apply_secret
install_chart
test_chart
export_variables

if [ "$POST_HOOK" != "" ]; then
  echo "Running post hook command: $POST_HOOK"
  eval "$POST_HOOK"
fi
