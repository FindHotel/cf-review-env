#!/bin/sh
# exit if any command fails
set -e

if [ "$PRE_HOOK" != "" ]; then
  echo "Running pre hook command: $PRE_HOOK"
  eval "$PRE_HOOK"
fi

chart_version=${CHART_VERSION:-0.2.13}
chart_ref=cf-review-env

# This code is necessary to ensure backwards compatibility
# The old name parameter included the prefix. In the new
# way the prefix is informed in a different variable.
# This code can be removed once all pipelines start using prefix.
name=${NAME}
if [ "$APP_PREFIX" != "" ]; then
  name="$APP_PREFIX-${APP_NAME_OVERRIDE:-$APP_NAME}"
fi
short_name=$(echo -n $name | cut -c1-15)
hash=$(echo "$name" | rhash -p "%c" -)
namespace=re-$short_name-$hash
is_ephemeral=${APP_IS_EPHEMERAL:-true}
host=$namespace.$APP_DOMAIN
url=https://$host
kube_context=$KUBE_CONTEXT

config_context() {
  # kubectl locks the config for each execution. To workaround
  # and allow multiple concurrent kubectl executions we copy the config
  kubeconfig_dir=/codefresh/volume/sensitive/.kube-$namespace/
  cp -R /codefresh/volume/sensitive/.kube "${kubeconfig_dir}"
  export KUBECONFIG=${kubeconfig_dir}/config
  kubectl config use-context "$kube_context"
}

namespace_apply() {
  # Variables need to be export in order to be replaced by envsubst
  updated_at=$(date --utc +%s)
  export UPDATED_AT=$updated_at
  export NAMESPACE=$namespace
  export IS_EPHEMERAL=$is_ephemeral
  cat <<EOF | envsubst | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/name: cf-review-env
  annotations:
    app.kubernetes.io/instance: $NAMESPACE
    app.kubernetes.io/pull_request_number: "$CF_PULL_REQUEST_NUMBER"
    app.kubernetes.io/branch_name: "$CF_BRANCH"
    app.kubernetes.io/repository_name: "$CF_REPO_NAME"
    app.kubernetes.io/repository_owner: "$CF_REPO_OWNER"
    app.kubernetes.io/updated_at: "$UPDATED_AT"
    app.kubernetes.io/is_ephemeral: "$IS_EPHEMERAL"
  name: $NAMESPACE
EOF
}

apply_secret() {
  # If the user doesn't have secrets we need to generate an empty file
  # to make our chart happy, without this the deployment breaks
  if [ ! -f "/codefresh/volume/secrets.env" ]; then
    touch /codefresh/volume/secrets.env
  fi

  kubectl create secret generic "$namespace" --from-env-file=/codefresh/volume/secrets.env --dry-run=client -o yaml --save-config=true --namespace "$namespace" | kubectl apply -f -
}

install_chart() {
  if [ "$VALUES_FILE" != "" ]; then
    echo "Using values file from user: $VALUES_FILE"
    export CUSTOMFILE_0="$VALUES_FILE"
  fi

  helm upgrade $namespace \
  $chart_ref \
  --install \
  --reset-values \
  --repo $HELM_REPO_URL \
  --version $chart_version \
  --namespace $namespace \
  --values $VALUES_FILE \
  --set envFrom.secretRef.name=$namespace \
  --set image.repository=$APP_IMAGE_URL \
  --set image.tag=$APP_IMAGE_TAG \
  --set "ingress.hosts[0].host"=$host \
  --set "ingress.hosts[0].paths[0]"=/ \
  --set "ingress.tls[0].hosts[0]"=$host \
  --cleanup-on-fail
  --force \
  --wait
}

# Exporting install_chart function
export -f  install_chart

test_chart() {
  TEST_CONNECTION=${TEST_CONNECTION:-true}
  if [ "$TEST_CONNECTION" = true ];
  then
    helm test "$namespace" --namespace "$namespace"

    # It is necessary to remove the test pod from the helm test bacause HPA metrics may
    # fail when we have a pod with completed status.
    # Issue: https://github.com/kubernetes/kubernetes/issues/79365
    # Issues: https://github.com/kubernetes/kubernetes/issues?page=1&q=is%3Aissue+is%3Aopen+HPA
    echo "INFO: Removed the completed Test Pod.";
    kubectl delete pod --selector="app.kubernetes.io/managed-by=Helm" --namespace "$namespace"
  else
    echo "Connection test is disabled.";
  fi
}

export_variables() {
  # Export normally here so they are available to the post hook
  export URL=$url

  # It is necessary to export these variables because we are using it on the pipelines
  cf_export URL="$url"

  # If APP_PREFIX is available we used it to prefix the exported variables
  # This is useful when multiple deployments are done in the same pipeline.
  # In such situation each deployment would override the variable of previous one.
  if [ "$APP_PREFIX" != "" ]; then
    # Replace dash (-) from app prefix by underscore (_)
    valid_app_prefix=$(echo "$APP_PREFIX" | sed 's/\-/\_/g')
    export "$valid_app_prefix"_URL="$url"
    cf_export "$valid_app_prefix"_URL="$url"
  fi
}

config_context
namespace_apply
apply_secret
install_chart
test_chart
export_variables

if [ "$POST_HOOK" != "" ]; then
  echo "Running post hook command: $POST_HOOK"
  eval "$POST_HOOK"
fi
