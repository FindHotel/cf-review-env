#!/bin/sh
chart_version=0.2.0
helm_version=3.0.3
chart_ref=cf-review-env
helm_test_status=$(kubectl --namespace $NAMESPACE get pods --selector="app.kubernetes.io/managed-by=Helm" -o jsonpath='{.items[?(@.status.phase!="Succeeded")].status.phase}')

SHORT_NAME=$(echo -n $NAME | cut -c1-15)
HASH=$(echo $NAME | rhash -p "%c" -)
export NAMESPACE=re-$SHORT_NAME-$HASH
export UPDATED_AT=$(date --utc +%s)
kubectl config use-context $KUBE_CONTEXT

kubectl version
cat <<EOF | envsubst | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/instance: $NAMESPACE
    app.kubernetes.io/name: cf-review-env
    app.kubernetes.io/pull_request_number: "$CF_PULL_REQUEST_NUMBER"
    app.kubernetes.io/repository_name: "$CF_REPO_NAME"
    app.kubernetes.io/repository_owner: "$CF_REPO_OWNER"
    app.kubernetes.io/updated_at: "$UPDATED_AT"
  name: $NAMESPACE
EOF
kubectl create secret generic $NAMESPACE --from-env-file=/codefresh/volume/secrets.env --dry-run -o yaml --save-config=true --namespace $NAMESPACE | kubectl apply -f -
codefresh generate image-pull-secret --cluster $KUBE_CONTEXT --namespace $NAMESPACE --registry $APP_REGISTRY_NAME

# We need to use env here because of the CUSTOM vars
# they have special charectes that export can't handle
env \
ACTION=install \
CHART_REPO_URL=$HELM_REPO_URL \
CHART_REF=$chart_ref \
KUBE_CONTEXT=$KUBE_CONTEXT \
RELEASE_NAME=$NAMESPACE \
CHART_VERSION=$chart_version \
HELM_VERSION=$helm_version \
CUSTOM_image_tag=$APP_IMAGE_TAG \
CUSTOM_image_repository=$APP_IMAGE_URL \
CUSTOM_imagePullSecrets=$(kubectl get secret --namespace $NAMESPACE --field-selector='type=kubernetes.io/dockercfg' -o=jsonpath='{.items[0].metadata.name}') \
CUSTOM_envFrom_secretRef_name=$NAMESPACE \
CUSTOM_"ingress_hosts[0]_host=$NAMESPACE.$APP_DOMAIN" \
CUSTOM_"ingress_hosts[0]_paths[0]=/" \
CUSTOM_"ingress_tls[0]_secretName=$NAMESPACE-tls" \
CUSTOM_"ingress_tls[0]_hosts[0]=$NAMESPACE.$APP_DOMAIN" \
CUSTOMFILE_0=$VALUES_FILE \
SKIP_CF_STABLE_HELM_REPO=true \
WAIT=true \
/opt/bin/release_chart

env ACTION=auth \
SKIP_CF_STABLE_HELM_REPO=true \
HELM_VERSION=$helm_version \
CHART_VERSION=$chart_version \
KUBE_CONTEXT=$KUBE_CONTEXT \
/opt/bin/release_chart
helm test $NAMESPACE --namespace $NAMESPACE
cf_export NAMESPACE=re-$SHORT_NAME-$HASH
if [[ "$helm_status_test" == "Failed" ]]; then
  echo "The branch has not passed because the Helm Test failed, please check your application pod.";
  exit 1;
fi
